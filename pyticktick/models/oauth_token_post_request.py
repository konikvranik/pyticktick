# coding: utf-8

"""
    TickTick API

    [TickTick](https://ticktick.com/) TODO task manager.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field

class OauthTokenPostRequest(BaseModel):
    """
    OauthTokenPostRequest
    """
    code: Optional[Any] = Field(default=None, description="The code obtained in the second step")
    grant_type: Optional[Any] = Field(default=None, description="grant type, now only authorization_code")
    scope: Optional[Any] = Field(default=None, description="spaces-separated permission scope. The currently available scopes are tasks:write, tasks:read")
    redirect_uri: Optional[Any] = Field(default=None, description="user-configured redirect url")
    additional_properties: Dict[str, Any] = {}
    __properties = ["code", "grant_type", "scope", "redirect_uri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OauthTokenPostRequest:
        """Create an instance of OauthTokenPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if code (nullable) is None
        # and __fields_set__ contains the field
        if self.code is None and "code" in self.__fields_set__:
            _dict['code'] = None

        # set to None if grant_type (nullable) is None
        # and __fields_set__ contains the field
        if self.grant_type is None and "grant_type" in self.__fields_set__:
            _dict['grant_type'] = None

        # set to None if scope (nullable) is None
        # and __fields_set__ contains the field
        if self.scope is None and "scope" in self.__fields_set__:
            _dict['scope'] = None

        # set to None if redirect_uri (nullable) is None
        # and __fields_set__ contains the field
        if self.redirect_uri is None and "redirect_uri" in self.__fields_set__:
            _dict['redirect_uri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OauthTokenPostRequest:
        """Create an instance of OauthTokenPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OauthTokenPostRequest.parse_obj(obj)

        _obj = OauthTokenPostRequest.parse_obj({
            "code": obj.get("code"),
            "grant_type": obj.get("grant_type"),
            "scope": obj.get("scope"),
            "redirect_uri": obj.get("redirect_uri")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


